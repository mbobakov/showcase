// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// FindMetricsHandlerFunc turns a function with the right signature into a find metrics handler
type FindMetricsHandlerFunc func(FindMetricsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindMetricsHandlerFunc) Handle(params FindMetricsParams) middleware.Responder {
	return fn(params)
}

// FindMetricsHandler interface for that can handle valid find metrics params
type FindMetricsHandler interface {
	Handle(FindMetricsParams) middleware.Responder
}

// NewFindMetrics creates a new http.Handler for the find metrics operation
func NewFindMetrics(ctx *middleware.Context, handler FindMetricsHandler) *FindMetrics {
	return &FindMetrics{Context: ctx, Handler: handler}
}

/*FindMetrics swagger:route GET /metrics metrics findMetrics

Get metrics for the time range

Get metrics for the time range

*/
type FindMetrics struct {
	Context *middleware.Context
	Handler FindMetricsHandler
}

func (o *FindMetrics) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindMetricsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// FindMetricsOKBodyAnon find metrics o k body anon
// swagger:model FindMetricsOKBodyAnon
type FindMetricsOKBodyAnon struct {

	// datapoints
	Datapoints int64 `json:"datapoints,omitempty"`
}

// Validate validates this find metrics o k body anon
func (o *FindMetricsOKBodyAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FindMetricsOKBodyAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FindMetricsOKBodyAnon) UnmarshalBinary(b []byte) error {
	var res FindMetricsOKBodyAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
